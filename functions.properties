#Wed Jul 20 22:30:33 BRT 2016
FUNCTIONS_QUANTITY=30
FUNCTION_EXPRESSION_000_EXPRESSION=return eval.environment.feeders.size()
FUNCTION_EXPRESSION_000_NAME=Total number of feeders
FUNCTION_EXPRESSION_000_TYPE=System Summary
FUNCTION_EXPRESSION_001_EXPRESSION=return eval.environment.loads.size()
FUNCTION_EXPRESSION_001_NAME=Total number of loads
FUNCTION_EXPRESSION_001_TYPE=System Summary
FUNCTION_EXPRESSION_002_EXPRESSION=return eval.environment.branches.size()
FUNCTION_EXPRESSION_002_NAME=Total number of branches
FUNCTION_EXPRESSION_002_TYPE=System Summary
FUNCTION_EXPRESSION_003_EXPRESSION=return eval.environment.switches.size()
FUNCTION_EXPRESSION_003_NAME=Total number of switches
FUNCTION_EXPRESSION_003_TYPE=System Summary
FUNCTION_EXPRESSION_004_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\n\nreturn df.format(eval.environment.getTotalActivePowerDemandMW())
FUNCTION_EXPRESSION_004_NAME=Total active power demand (MW)
FUNCTION_EXPRESSION_004_TYPE=System Summary
FUNCTION_EXPRESSION_005_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\r\n\r\nreturn df.format(eval.environment.getTotalReactivePowerDemandMVar())
FUNCTION_EXPRESSION_005_NAME=Total reactive power demand (MVar)
FUNCTION_EXPRESSION_005_TYPE=System Summary
FUNCTION_EXPRESSION_006_EXPRESSION=return eval.environment.loads.stream()\n\t.filter(function(load) { return load.isSupplied() }).count();
FUNCTION_EXPRESSION_006_NAME=Loads supplied
FUNCTION_EXPRESSION_006_TYPE=Power Flow
FUNCTION_EXPRESSION_007_EXPRESSION=return eval.environment.loads.stream()\r\n\t.filter(function(load) { return load.isOn() && \!load.isSupplied(); }).count();
FUNCTION_EXPRESSION_007_NAME=Load not supplied
FUNCTION_EXPRESSION_007_TYPE=Power Flow
FUNCTION_EXPRESSION_008_EXPRESSION=return eval.environment.loads.stream()\r\n\t.filter(function(load) { return \!load.isOn() }).count();
FUNCTION_EXPRESSION_008_NAME=Loads out-of-service
FUNCTION_EXPRESSION_008_TYPE=Power Flow
FUNCTION_EXPRESSION_009_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.000");\n\nreturn df.format(eval.environment.loads.stream()\r\n\t\t.filter(function(load) { return load.isOn() && load.isSupplied(); })\r\n\t\t.mapToDouble(function(load) { return load.getActivePowerMW(); }).sum())
FUNCTION_EXPRESSION_009_NAME=Loads active power supplied (MW)
FUNCTION_EXPRESSION_009_TYPE=Power Flow
FUNCTION_EXPRESSION_010_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.000");\r\n\r\nreturn df.format(eval.environment.loads.stream()\r\t\t.filter(function(load) { return load.isOn() && load.isSupplied(); })\r\t\t.mapToDouble(function(load) { return load.getReactivePowerMVar(); }).sum())
FUNCTION_EXPRESSION_010_NAME=Loads reactive power supplied (MVar)
FUNCTION_EXPRESSION_010_TYPE=Power Flow
FUNCTION_EXPRESSION_011_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.000");\r\n\r\nreturn df.format(eval.environment.loads.stream()\r\t\t.filter(function(load) { return load.isOn() && \!load.isSupplied(); })\r\t\t.mapToDouble(function(load) { return load.getActivePowerMW(); }).sum())
FUNCTION_EXPRESSION_011_NAME=Loads active power not supplied (MW)
FUNCTION_EXPRESSION_011_TYPE=Power Flow
FUNCTION_EXPRESSION_012_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.000");\r\n\r\nreturn df.format(eval.environment.loads.stream()\r\t\t.filter(function(load) { return load.isOn() && \!load.isSupplied(); })\r\t\t.mapToDouble(function(load) { return load.getReactivePowerMVar(); }).sum())
FUNCTION_EXPRESSION_012_NAME=Loads reactive power not supplied (MVar)
FUNCTION_EXPRESSION_012_TYPE=Power Flow
FUNCTION_EXPRESSION_013_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.000");\r\n\r\nreturn df.format(eval.environment.loads.stream()\r\t\t.filter(function(load) { return \!load.isOn(); })\r\t\t.mapToDouble(function(load) { return load.getActivePowerMW(); }).sum())
FUNCTION_EXPRESSION_013_NAME=Loads active power out-of-service (MW)
FUNCTION_EXPRESSION_013_TYPE=Power Flow
FUNCTION_EXPRESSION_014_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.000");\r\n\r\nreturn df.format(eval.environment.loads.stream()\r\t\t.filter(function(load) { return \!load.isOn(); })\r\t\t.mapToDouble(function(load) { return load.getReactivePowerMVar(); }).sum())
FUNCTION_EXPRESSION_014_NAME=Loads reactive power out-of-service (MVar)
FUNCTION_EXPRESSION_014_TYPE=Power Flow
FUNCTION_EXPRESSION_015_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000000");\r\n\n//soma a pot\u00EAncia ativa de todos os loads\nvar sum \= eval.environment.loads.stream().filter(function(load) { return load.isOn() && load.isSupplied() })\r\n\t\t.mapToDouble(function (load) { return load.activePowerKW }).sum();\n\n//transforma em MW\nsum \= sum/1000;\n\n//soma com a perda de pot\u00EAncia\nsum +\= eval.environment.branches.stream()\n\t.filter(function(branch) { return branch.isClosed(); })\n\t.mapToDouble(function(branch) { return branch.getActiveLossMW(); }).sum();\n\r\nreturn df.format(sum);
FUNCTION_EXPRESSION_015_NAME=Feeders used active power (MW)
FUNCTION_EXPRESSION_015_TYPE=Power Flow
FUNCTION_EXPRESSION_016_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000000");\r\r\n//soma a pot\u00EAncia ativa de todos os loads\r\nvar sum \= eval.environment.loads.stream().filter(function(load) { return load.isOn() && load.isSupplied() })\r\t\t.mapToDouble(function (load) { return load.reactivePowerKVar }).sum();\r\n\r\n//transforma em MW\r\nsum \= sum/1000;\r\n\r\n//soma com a perda de pot\u00EAncia\r\nsum +\= eval.environment.branches.stream()\r\n\t.filter(function(branch) { return branch.isClosed(); })\r\n\t.mapToDouble(function(branch) { return branch.getReactiveLossMVar(); }).sum();\r\n\r\r\nreturn df.format(sum);
FUNCTION_EXPRESSION_016_NAME=Feeders used reactive power (MVar)
FUNCTION_EXPRESSION_016_TYPE=Power Flow
FUNCTION_EXPRESSION_017_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000000");\r\n\n//soma a pot\u00EAncia ativa de todos os feeders\nvar available \= eval.environment.feeders.stream().mapToDouble(function (feeder) { return feeder.activePowerKW }).sum();\n\n//transforma em MW\navailable \= available/1000;\n\n//soma a pot\u00EAncia ativa de todos os loads\nvar sum \= eval.environment.loads.stream().filter(function(load) { return load.isOn() && load.isSupplied() })\r\n\t\t.mapToDouble(function (load) { return load.activePowerKW }).sum();\n\n//transforma em MW\nsum \= sum/1000;\n\n//soma com a perda de pot\u00EAncia\nsum +\= eval.environment.branches.stream()\n\t.filter(function(branch) { return branch.isClosed(); })\n\t.mapToDouble(function(branch) { return branch.getActiveLossMW(); }).sum();\n\r\nreturn df.format(available - sum);
FUNCTION_EXPRESSION_017_NAME=Feeders available active power (MW)
FUNCTION_EXPRESSION_017_TYPE=Power Flow
FUNCTION_EXPRESSION_018_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000000");\r\r\n//soma a pot\u00EAncia ativa de todos os feeders\r\nvar available \= eval.environment.feeders.stream().mapToDouble(function (feeder) { return feeder.reactivePowerKVar }).sum();\r\n\r\n//transforma em MW\r\navailable \= available/1000;\r\n\r\n//soma a pot\u00EAncia ativa de todos os loads\r\nvar sum \= eval.environment.loads.stream().filter(function(load) { return load.isOn() && load.isSupplied() })\r\t\t.mapToDouble(function (load) { return load.reactivePowerKVar }).sum();\r\n\r\n//transforma em MW\r\nsum \= sum/1000;\r\n\r\n//soma com a perda de pot\u00EAncia\r\nsum +\= eval.environment.branches.stream()\r\n\t.filter(function(branch) { return branch.isClosed(); })\r\n\t.mapToDouble(function(branch) { return branch.getReactiveLossMVar(); }).sum();\r\n\r\nreturn df.format(available - sum);
FUNCTION_EXPRESSION_018_NAME=Feeders available reactive power (MVar)
FUNCTION_EXPRESSION_018_TYPE=Power Flow
FUNCTION_EXPRESSION_019_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.000000000");\n\nreturn df.format(eval.environment.branches.stream()\n\t\t.filter(function(branch) { return branch.isClosed(); })\n\t\t.mapToDouble(function(branch) { return branch.getActiveLossMW(); }).sum())
FUNCTION_EXPRESSION_019_NAME=Total active power lost (MW)
FUNCTION_EXPRESSION_019_TYPE=Power Flow
FUNCTION_EXPRESSION_020_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.000000000");\n\nreturn df.format(eval.environment.branches.stream()\n\t\t.filter(function(branch) { return branch.isClosed(); })\n\t\t.mapToDouble(function(branch) { return branch.getReactiveLossMVar(); }).sum())
FUNCTION_EXPRESSION_020_NAME=Total reactive power lost (MVar)
FUNCTION_EXPRESSION_020_TYPE=Power Flow
FUNCTION_EXPRESSION_021_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\n\nvar activePowerLostMW \= eval.environment.getActivePowerLostMW();\r\nvar activePowerDemandMW \= eval.environment.getSuppliedActivePowerDemandMW();\nvar lossPercentage \= 0;\r\nif (activePowerDemandMW > 0) {\n\tlossPercentage \= activePowerLostMW / activePowerDemandMW * 100;\r\n}\n\nreturn df.format(lossPercentage);
FUNCTION_EXPRESSION_021_NAME=Active power lost percentage (%)
FUNCTION_EXPRESSION_021_TYPE=Objective Functions
FUNCTION_EXPRESSION_022_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\r\n\r\nvar reactivePowerLostMVar \= eval.environment.getReactivePowerLostMVar();\rvar reactivePowerDemandMVar \= eval.environment.getSuppliedReactivePowerDemandMVar();\r\nvar lossPercentage \= 0;\rif (reactivePowerDemandMVar > 0) {\r\n\tlossPercentage \= reactivePowerLostMVar / reactivePowerDemandMVar * 100;\r\r\n}\r\n\r\nreturn df.format(lossPercentage);
FUNCTION_EXPRESSION_022_NAME=Reactive power lost percentage (%)
FUNCTION_EXPRESSION_022_TYPE=Objective Functions
FUNCTION_EXPRESSION_023_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\n\nvar value \= eval.environment.getSuppliedActivePowerPercentage();\n\r\nreturn df.format(value);
FUNCTION_EXPRESSION_023_NAME=Supplied active power percentage (%)
FUNCTION_EXPRESSION_023_TYPE=Objective Functions
FUNCTION_EXPRESSION_024_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\r\n\r\nvar totalReactivePowerDemand \= eval.environment.getTotalReactivePowerDemandMVar();\r\nvar suppliedReactivePower \= eval.environment.getSuppliedReactivePowerDemandMVar();\r\n\r\nvar value \= 0;\r\nif (totalReactivePowerDemand > 0) {\r\n\tvalue \= suppliedReactivePower / totalReactivePowerDemand * 100;\r\n}\r\n\r\r\nreturn df.format(value);
FUNCTION_EXPRESSION_024_NAME=Supplied reactive power percentage (%)
FUNCTION_EXPRESSION_024_TYPE=Objective Functions
FUNCTION_EXPRESSION_025_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\r\n\r\nvar totalActivePowerDemand \= eval.environment.getTotalActivePowerDemandMW();\r\nvar notSuppliedActivePower \= eval.environment.getNotSuppliedActivePowerDemandMW();\r\n\r\nvar value \= 0;\r\nif (totalActivePowerDemand > 0) {\r\n\tvalue \= notSuppliedActivePower / totalActivePowerDemand * 100;\r\n}\r\n\r\r\nreturn df.format(value);
FUNCTION_EXPRESSION_025_NAME=Not supplied active power percentage (%)
FUNCTION_EXPRESSION_025_TYPE=Objective Functions
FUNCTION_EXPRESSION_026_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\r\n\r\nvar totalReactivePowerDemand \= eval.environment.getTotalReactivePowerDemandMVar();\r\nvar notSuppliedReactivePower \= eval.environment.getNotSuppliedReactivePowerDemandMVar();\r\n\r\nvar value \= 0;\r\nif (totalReactivePowerDemand > 0) {\r\n\tvalue \= notSuppliedReactivePower / totalReactivePowerDemand * 100;\r\n}\r\n\r\r\nreturn df.format(value);
FUNCTION_EXPRESSION_026_NAME=Not supplied reactive power percentage (%)
FUNCTION_EXPRESSION_026_TYPE=Objective Functions
FUNCTION_EXPRESSION_027_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\r\n\r\nvar totalActivePowerDemand \= eval.environment.getTotalActivePowerDemandMW();\r\nvar outOfServiceActivePower \= eval.environment.getOutOfServiceActivePowerDemandMW();\r\n\r\nvar value \= 0;\r\nif (totalActivePowerDemand > 0) {\r\n\tvalue \= outOfServiceActivePower / totalActivePowerDemand * 100;\r\n}\r\n\r\r\nreturn df.format(value);
FUNCTION_EXPRESSION_027_NAME=Out-of-service active power percentage (%)
FUNCTION_EXPRESSION_027_TYPE=Objective Functions
FUNCTION_EXPRESSION_028_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\r\r\nvar totalReactivePowerDemand \= eval.environment.getTotalReactivePowerDemandMVar();\rvar outOfServiceReactivePower \= eval.environment.getOutOfServiceReactivePowerDemandMVar();\r\r\nvar value \= 0;\rif (totalReactivePowerDemand > 0) {\r\tvalue \= outOfServiceReactivePower / totalReactivePowerDemand * 100;\r}\r\r\nreturn df.format(value);
FUNCTION_EXPRESSION_028_NAME=Out-of-service reactive power percentage (%)
FUNCTION_EXPRESSION_028_TYPE=Objective Functions
FUNCTION_EXPRESSION_029_EXPRESSION=var df \= new java.text.DecimalFormat("\#\#0.00000");\r\n\r\nvar value \= eval.environment.getSuppliedLoadsActivePowerVsPriorityPercentage();\r\n\nreturn df.format(value);
FUNCTION_EXPRESSION_029_NAME=Supplied active power vs priority (%)
FUNCTION_EXPRESSION_029_TYPE=Objective Functions
